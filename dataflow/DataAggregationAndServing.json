{
	"name": "DataAggregationAndServing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "DimAirlineSilver"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "DimPassengerSilver"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "FactBookings"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkTopAirlines"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkGenderDistribution"
				}
			],
			"transformations": [
				{
					"name": "AirlineJoin"
				},
				{
					"name": "SelectColoums"
				},
				{
					"name": "AggregateAirline"
				},
				{
					"name": "DenseRanking"
				},
				{
					"name": "AggregateAge"
				},
				{
					"name": "Top5"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as integer,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline') ~> DimAirlineSilver",
				"source(output(",
				"          passenger_id as short,",
				"          full_name as string,",
				"          gender_flag as string,",
				"          age as short,",
				"          country as string,",
				"          first_name as string,",
				"          last_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger') ~> DimPassengerSilver",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as integer,",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBookings') ~> FactBookings",
				"FactBookings, DimAirlineSilver join(FactBookings@airline_id == DimAirlineSilver@airline_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AirlineJoin",
				"AirlineJoin select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id,",
				"          airline_id = FactBookings@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColoums",
				"SelectColoums aggregate(groupBy(airline_name),",
				"     total_sales = sum(ticket_cost)) ~> AggregateAirline",
				"AggregateAirline window(desc(total_sales, true),",
				"     rank = denseRank()) ~> DenseRanking",
				"DimPassengerSilver aggregate(groupBy(gender_flag),",
				"     avg_age = avg(age)) ~> AggregateAge",
				"DenseRanking filter(rank <= 5) ~> Top5",
				"Top5 alterRow(upsertIf(1==1)) ~> AlterRow2",
				"AggregateAge alterRow(upsertIf(1==1)) ~> AlterRow1",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'TopAirlines',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_name'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkTopAirlines",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'AveragaAgeByGender',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['gender_flag'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkGenderDistribution"
			]
		}
	}
}