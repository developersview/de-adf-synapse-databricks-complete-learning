{
	"name": "DataTransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dimairline_csv",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "dimflight_csv",
						"type": "DatasetReference"
					},
					"name": "DimFlight"
				},
				{
					"dataset": {
						"referenceName": "dimpassenger_csv",
						"type": "DatasetReference"
					},
					"name": "DimPassenger"
				},
				{
					"dataset": {
						"referenceName": "factbookings_parquet",
						"type": "DatasetReference"
					},
					"name": "FactBookings"
				},
				{
					"dataset": {
						"referenceName": "dimairport_json",
						"type": "DatasetReference"
					},
					"name": "DimAirport"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkDimAirline"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkDimFlight"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkDimPassenger"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkFactBookings"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "SinkDimAirport"
				}
			],
			"transformations": [
				{
					"name": "DerviedColumnCountry"
				},
				{
					"name": "SelectAndRenameColumns"
				},
				{
					"name": "SelectAndRenameColumn"
				},
				{
					"name": "DerivedMaleFlag"
				},
				{
					"name": "DerivedFemaleFlag"
				},
				{
					"name": "FilterAge"
				},
				{
					"name": "DerivedFirstAndLastName"
				},
				{
					"name": "CastTicketCost"
				},
				{
					"name": "DerivedCapitalizeAirportName"
				},
				{
					"name": "DeriveAirportCode"
				},
				{
					"name": "AlterRowDimAirline"
				},
				{
					"name": "AlterRowDimFlight"
				},
				{
					"name": "AlterDimPassenger"
				},
				{
					"name": "AlterRowFactBookings"
				},
				{
					"name": "AlterRowDimAirport"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as string,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimFlight",
				"source(output(",
				"          passenger_id as short,",
				"          full_name as string,",
				"          gender as string,",
				"          age as short,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimPassenger",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> FactBookings",
				"source(output(",
				"          airport_id as integer,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> DimAirport",
				"DimAirline derive(country = upper(country)) ~> DerviedColumnCountry",
				"DimFlight select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_timestamp = departure_time,",
				"          arrival_timestamp = arrival_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumns",
				"DimPassenger select(mapColumn(",
				"          passenger_id,",
				"          full_name,",
				"          gender_flag = gender,",
				"          age,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumn",
				"SelectAndRenameColumn derive(gender_flag = regexReplace(gender_flag, \"M\", \"Male\")) ~> DerivedMaleFlag",
				"DerivedMaleFlag derive(gender_flag = regexReplace(gender_flag, \"F\", \"Female\")) ~> DerivedFemaleFlag",
				"DerivedFemaleFlag filter((age > 28)) ~> FilterAge",
				"FilterAge derive(first_name = split(full_name, \" \")[1],",
				"          last_name = split(full_name, \" \")[2]) ~> DerivedFirstAndLastName",
				"FactBookings cast(output(",
				"          ticket_cost as integer '000'",
				"     ),",
				"     errors: true) ~> CastTicketCost",
				"DimAirport derive(airport_name = upper(airport_name)) ~> DerivedCapitalizeAirportName",
				"DerivedCapitalizeAirportName derive(airport_code = left(airport_name, 3)) ~> DeriveAirportCode",
				"DerviedColumnCountry alterRow(upsertIf(1==1)) ~> AlterRowDimAirline",
				"SelectAndRenameColumns alterRow(upsertIf(1==1)) ~> AlterRowDimFlight",
				"DerivedFirstAndLastName alterRow(upsertIf(1==1)) ~> AlterDimPassenger",
				"CastTicketCost alterRow(upsertIf(1==1)) ~> AlterRowFactBookings",
				"DeriveAirportCode alterRow(upsertIf(1==1)) ~> AlterRowDimAirport",
				"AlterRowDimAirline sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDimAirline",
				"AlterRowDimFlight sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlight',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['flight_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDimFlight",
				"AlterDimPassenger sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['passenger_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDimPassenger",
				"AlterRowFactBookings sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBookings',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['booking_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkFactBookings",
				"AlterRowDimAirport sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirport',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airport_id'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDimAirport"
			]
		}
	}
}