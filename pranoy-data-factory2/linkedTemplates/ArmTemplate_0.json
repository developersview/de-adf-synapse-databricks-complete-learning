{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pranoy-data-factory2"
		},
		"ls_adlsgen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2'"
		},
		"ls_azuresql_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_azuresql'"
		},
		"ls_onprem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_onprem'"
		},
		"ls_adlsgen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pranoyadlsgen2.dfs.core.windows.net/"
		},
		"ls_azuresql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adf-project-pranoy.database.windows.net"
		},
		"ls_azuresql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfdb"
		},
		"ls_azuresql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "praadmin"
		},
		"ls_github_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"ls_onprem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "D:\\de-adf-synapse-databricks-complete-learning\\ADF_Synapse_Project\\data\\onprem"
		},
		"ls_onprem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "pcslg1998@gmail.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azuresql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_azuresql_properties_typeProperties_server')]",
					"database": "[parameters('ls_azuresql_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_azuresql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_azuresql_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_github')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_github_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PranoySelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "This is self hosted integration runtime created to move data from OnPrem Server to ADLS Gen 2",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_campaign')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_campaigns.csv",
						"folderPath": "campaigns",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_customer.csv",
						"folderPath": "customer",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_sk",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "residential_location",
						"type": "String"
					},
					{
						"name": "customer_segment",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_dates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_dates.csv",
						"folderPath": "dates",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "full_date",
						"type": "String"
					},
					{
						"name": "date_sk",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "weekday",
						"type": "String"
					},
					{
						"name": "quarter",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_products.csv",
						"folderPath": "products",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales",
						"fileSystem": "retail-bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_salesperson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_salespersons.csv",
						"folderPath": "salespersons",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_stores.csv",
						"folderPath": "stores",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_datalake_azuresql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales",
						"fileSystem": "retail-bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_datalake_github')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_foldername": {
						"type": "String"
					},
					"p_filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_foldername",
							"type": "Expression"
						},
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_datalake_monitor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lastload.json",
						"folderPath": "monitor",
						"fileSystem": "retail-lookup"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_datalake_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_customer.csv",
						"folderPath": "customer",
						"fileSystem": "retail-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_azuresql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuresql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuresql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_datalake_monitor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lastload.json",
						"folderPath": "monitor",
						"fileSystem": "retail-lookup"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_github')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_github",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "/developersview/de-adf-synapse-databricks-complete-learning/refs/heads/master/ADF_Synapse_Project/data/github/@{dataset().p_filename}",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_github')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ls_onprem_properties_typeProperties_host')]",
					"userId": "[parameters('ls_onprem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_onprem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "PranoySelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/PranoySelfHostedIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataAggregationAndServing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimSalesPerson"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "FactSales"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimProducts"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimDates"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimCampaigns"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "DimStores"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalSales"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTopSalesPerson"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTopSellingProducts"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalSalesByBrand"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalSalesByCategory"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkProductCountByCustomerSegment"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkAlterRowCustomerProduct"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalCustomerCountBySegment"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalCustomerCountByLocation"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkStores"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalSalesPerMonth"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkTotalSalesPerQuarter"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkCampaigns"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "SinkSales"
						}
					],
					"transformations": [
						{
							"name": "JoinSalesPersonAndSales"
						},
						{
							"name": "SelectNecessaryColoumns"
						},
						{
							"name": "GroupBySalesPersonType"
						},
						{
							"name": "ModifyTotalSales"
						},
						{
							"name": "AlterRowTotalSales"
						},
						{
							"name": "DenseRanking"
						},
						{
							"name": "Top5SalesPerson"
						},
						{
							"name": "AlterRowSalesPerson"
						},
						{
							"name": "JoinProductsAndSales"
						},
						{
							"name": "TotalSalesByProduct"
						},
						{
							"name": "DenseRankingOfProducts"
						},
						{
							"name": "Top5Products"
						},
						{
							"name": "AlterRowTopProducts"
						},
						{
							"name": "ModifyTotalSale"
						},
						{
							"name": "SelectCustomerBasedOnLocationAndSegment"
						},
						{
							"name": "TotalCustomerCountByLocation"
						},
						{
							"name": "TotalCustomerCountBySegment"
						},
						{
							"name": "JoinCustomerAndSales"
						},
						{
							"name": "OrderByTotalCountSegment"
						},
						{
							"name": "OrderByTotalCountLocation"
						},
						{
							"name": "JoinProductsWithCustomerSalesJoin"
						},
						{
							"name": "SelectNecessaryColumns"
						},
						{
							"name": "AlterRowCustomerProduct"
						},
						{
							"name": "ProductCountByCustomerSegment"
						},
						{
							"name": "DenseRankingCustomerSegment"
						},
						{
							"name": "TotalSalesByCategory"
						},
						{
							"name": "TotalSalesByBrand"
						},
						{
							"name": "ModifyTotalSalesCol"
						},
						{
							"name": "ModifyTotalSalesCol2"
						},
						{
							"name": "AlterRowTotalSalesByBrand"
						},
						{
							"name": "AlterRowTotalSalesByCategory"
						},
						{
							"name": "AlterRowProductCountByCustomerSegment"
						},
						{
							"name": "AlterRowTotalCustomerCountBySegment"
						},
						{
							"name": "AlterRowTotalCustomerCountByLocation"
						},
						{
							"name": "JoinDatesAndSales"
						},
						{
							"name": "AlterRowStores"
						},
						{
							"name": "TotalSalesPerQuarter"
						},
						{
							"name": "TotalSalesPerMonth"
						},
						{
							"name": "ModifyTotalSalesColumn2"
						},
						{
							"name": "ModifyTotalSalesColumn1"
						},
						{
							"name": "AlterRowTotalSalesPerMonth"
						},
						{
							"name": "AlterRowTotalSalesPerQuarter"
						},
						{
							"name": "AlterRowCampaigns"
						},
						{
							"name": "AlterRowSales"
						}
					],
					"scriptLines": [
						"source(output(",
						"          salesperson_sk as short,",
						"          salesperson_id as string,",
						"          salesperson_name as string,",
						"          salesperson_role as string,",
						"          first_name as string,",
						"          last_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'salesperson') ~> DimSalesPerson",
						"source(output(",
						"          sales_sk as integer,",
						"          sales_id as string,",
						"          customer_sk as integer,",
						"          product_sk as integer,",
						"          store_sk as integer,",
						"          salesperson_sk as integer,",
						"          campaign_sk as integer,",
						"          sales_date as date,",
						"          total_amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'sales') ~> FactSales",
						"source(output(",
						"          product_sk as short,",
						"          product_id as string,",
						"          product_name as string,",
						"          category as string,",
						"          brand as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'products') ~> DimProducts",
						"source(output(",
						"          customer_sk as integer,",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          location as string,",
						"          customer_segment as string,",
						"          full_name as string,",
						"          user_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'customer') ~> DimCustomer",
						"source(output(",
						"          full_date as date,",
						"          date_sk as integer,",
						"          year as integer,",
						"          month as integer,",
						"          day as integer,",
						"          weekday as integer,",
						"          quarter as integer,",
						"          quarter_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'dates') ~> DimDates",
						"source(output(",
						"          campaign_sk as integer,",
						"          campaign_id as string,",
						"          campaign_name as string,",
						"          start_date_sk as integer,",
						"          end_date_sk as integer,",
						"          campaign_budget as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'campaign') ~> DimCampaigns",
						"source(output(",
						"          store_sk as short,",
						"          store_id as string,",
						"          store_name as string,",
						"          store_type as string,",
						"          location as string,",
						"          store_manager_sk as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-silver',",
						"     folderPath: 'store') ~> DimStores",
						"DimSalesPerson, FactSales join(DimSalesPerson@salesperson_sk == FactSales@salesperson_sk,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSalesPersonAndSales",
						"JoinSalesPersonAndSales select(mapColumn(",
						"          salesperson_id,",
						"          salesperson_name,",
						"          salesperson_role,",
						"          first_name,",
						"          last_name,",
						"          total_amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNecessaryColoumns",
						"JoinSalesPersonAndSales aggregate(groupBy(salesperson_role),",
						"     total_salesperson = count(salesperson_id),",
						"          total_sales = sum(total_amount)) ~> GroupBySalesPersonType",
						"GroupBySalesPersonType derive(total_sales = round(total_sales, 2)) ~> ModifyTotalSales",
						"ModifyTotalSales alterRow(upsertIf(1==1)) ~> AlterRowTotalSales",
						"SelectNecessaryColoumns window(over(salesperson_role),",
						"     desc(total_amount, true),",
						"     rank = denseRank()) ~> DenseRanking",
						"DenseRanking filter(rank <= 5) ~> Top5SalesPerson",
						"Top5SalesPerson alterRow(upsertIf(1==1)) ~> AlterRowSalesPerson",
						"DimProducts, FactSales join(DimProducts@product_sk == FactSales@product_sk,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductsAndSales",
						"JoinProductsAndSales aggregate(groupBy(product_id,",
						"          product_name,",
						"          category),",
						"     total_sales = sum(total_amount)) ~> TotalSalesByProduct",
						"TotalSalesByProduct window(over(category),",
						"     desc(total_sales, true),",
						"     rank = denseRank()) ~> DenseRankingOfProducts",
						"DenseRankingOfProducts filter(rank <= 5) ~> Top5Products",
						"ModifyTotalSale alterRow(upsertIf(1==1)) ~> AlterRowTopProducts",
						"Top5Products derive(total_sales = round(total_sales, 2)) ~> ModifyTotalSale",
						"DimCustomer select(mapColumn(",
						"          customer_id,",
						"          location,",
						"          customer_segment,",
						"          full_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomerBasedOnLocationAndSegment",
						"SelectCustomerBasedOnLocationAndSegment aggregate(groupBy(location),",
						"     total_customer_count = count(customer_id)) ~> TotalCustomerCountByLocation",
						"SelectCustomerBasedOnLocationAndSegment aggregate(groupBy(customer_segment),",
						"     total_customer_count = count(customer_id)) ~> TotalCustomerCountBySegment",
						"DimCustomer, FactSales join(DimCustomer@customer_sk == FactSales@customer_sk,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomerAndSales",
						"TotalCustomerCountBySegment sort(desc(total_customer_count, true)) ~> OrderByTotalCountSegment",
						"TotalCustomerCountByLocation sort(desc(total_customer_count, true)) ~> OrderByTotalCountLocation",
						"JoinCustomerAndSales, DimProducts join(FactSales@product_sk == DimProducts@product_sk,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProductsWithCustomerSalesJoin",
						"JoinProductsWithCustomerSalesJoin select(mapColumn(",
						"          customer_id,",
						"          email,",
						"          customer_segment,",
						"          full_name,",
						"          product_id,",
						"          product_name,",
						"          category,",
						"          brand",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNecessaryColumns",
						"SelectNecessaryColumns alterRow(upsertIf(1==1)) ~> AlterRowCustomerProduct",
						"SelectNecessaryColumns aggregate(groupBy(customer_segment),",
						"     total_product_count = count(product_name)) ~> ProductCountByCustomerSegment",
						"ProductCountByCustomerSegment window(desc(total_product_count, true),",
						"     rank = denseRank()) ~> DenseRankingCustomerSegment",
						"TotalSalesByProduct aggregate(groupBy(category),",
						"     total_sales = sum(total_sales)) ~> TotalSalesByCategory",
						"JoinProductsAndSales aggregate(groupBy(brand),",
						"     total_sales = sum(total_amount)) ~> TotalSalesByBrand",
						"TotalSalesByBrand derive(total_sales = round(total_sales, 2)) ~> ModifyTotalSalesCol",
						"TotalSalesByCategory derive(total_sales = round(total_sales, 2)) ~> ModifyTotalSalesCol2",
						"ModifyTotalSalesCol alterRow(upsertIf(1==1)) ~> AlterRowTotalSalesByBrand",
						"ModifyTotalSalesCol2 alterRow(upsertIf(1==1)) ~> AlterRowTotalSalesByCategory",
						"DenseRankingCustomerSegment alterRow(upsertIf(1==1)) ~> AlterRowProductCountByCustomerSegment",
						"OrderByTotalCountSegment alterRow(updateIf(1==1)) ~> AlterRowTotalCustomerCountBySegment",
						"OrderByTotalCountLocation alterRow(upsertIf(1==1)) ~> AlterRowTotalCustomerCountByLocation",
						"DimDates, FactSales join(full_date == sales_date,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDatesAndSales",
						"DimStores alterRow(upsertIf(1==1)) ~> AlterRowStores",
						"JoinDatesAndSales aggregate(groupBy(quarter_name),",
						"     total_sales = sum(total_amount)) ~> TotalSalesPerQuarter",
						"JoinDatesAndSales aggregate(groupBy(month),",
						"     total_sales = sum(total_amount)) ~> TotalSalesPerMonth",
						"TotalSalesPerQuarter derive(total_sales = iif(isNull(total_sales), 0, toInteger(total_sales))) ~> ModifyTotalSalesColumn2",
						"TotalSalesPerMonth derive(total_sales = iif(isNull(total_sales), 0, toInteger(total_sales))) ~> ModifyTotalSalesColumn1",
						"ModifyTotalSalesColumn1 alterRow(upsertIf(1==1)) ~> AlterRowTotalSalesPerMonth",
						"ModifyTotalSalesColumn2 alterRow(upsertIf(1==1)) ~> AlterRowTotalSalesPerQuarter",
						"DimCampaigns alterRow(upsertIf(1==1)) ~> AlterRowCampaigns",
						"FactSales alterRow(upsertIf(1==1)) ~> AlterRowSales",
						"AlterRowTotalSales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalSales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['salesperson_role'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalSales",
						"AlterRowSalesPerson sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'Top5SalesPerson',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTopSalesPerson",
						"AlterRowTopProducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'Top5Products',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['product_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTopSellingProducts",
						"AlterRowTotalSalesByBrand sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalSalesByBrand',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['brand'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalSalesByBrand",
						"AlterRowTotalSalesByCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalSalesByCategory',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalSalesByCategory",
						"AlterRowProductCountByCustomerSegment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'ProductCountByCustomerSegment',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['customer_segment'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkProductCountByCustomerSegment",
						"AlterRowCustomerProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'CustomerProduct',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['customer_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkAlterRowCustomerProduct",
						"AlterRowTotalCustomerCountBySegment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalCustomerCountBySegment',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: true,",
						"     upsertable: false,",
						"     keys:['customer_segment'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalCustomerCountBySegment",
						"AlterRowTotalCustomerCountByLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalCustomerCountByLocation',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['location'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalCustomerCountByLocation",
						"AlterRowStores sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'Stores',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['store_sk'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkStores",
						"AlterRowTotalSalesPerMonth sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalSalesPerMonth',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['month'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalSalesPerMonth",
						"AlterRowTotalSalesPerQuarter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'TotalSalesPerQuarter',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkTotalSalesPerQuarter",
						"AlterRowCampaigns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'Campaigns',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['campaign_sk'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkCampaigns",
						"AlterRowSales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'retail-gold',",
						"     folderPath: 'Sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['sales_sk'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		}
	]
}